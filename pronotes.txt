  ------------------------------------------------------------------
                REACT : Advanced FRONT END Application Library
        ------------------------------------------------------------------

        1. Basic React 
            - React App is a collection of different Libraries
            - React app is consist of different type of 'components', which used to display contents in browser, in react app, all the components are arranged in a tree structure. Tree structure has a single parent/root node which is by default known as 'App component'. , component are reusable. 
            - Pure JavaScript functions to built components, it return how to display contents in browser. pure function are capable of doing only one task with help of its arguments. function without side effects
            - Declarative approach
            - Virtual DOM : Light weight memory representation of real DOM. 
            - Babel Library : used to display contents in to browser
            - JSX (JavaScript XML) : JS extension for writing html code in JavaScript, used to display content in browser
                - JSX element : ex: const heading = <h1>Heading1</h1>
                - Rules for using JSX
                    - Every JSX elements must be inside a single a tag. Parent tag can be any container tag ( div,section,article etc..) or react fragments ( <></> ) tag without name is known as react fragments.
                    - In JSX we have to use 'camel case' to write contents : ex: fontSize
                    - Every JSX code must has a closing tag. if a tag has contents then: <startingTag>contents</endingTag> , if a tag doesnot has content: <startingTag></endingTag> or we use self closing tag ( <startingTag/> ) as well
                    - Instead of Attribute 'class' use 'className' in JSX
                    - Instead of attribute 'for' use 'htmlFor' in JSX
                    - in JSX , we can directly pass js code inside a curly braces. ex: {js code}
        2. React App Creation
            - CRA (using create-react-app command)
            - Vite : tool for building web Application
                - Installing vite globally : npm i -g create-vite
                - React app Creation using vite : npm create vite@latest reactAppName -- --template react
                - to run vite react project : use command- npm run dev 
                - to generate build folder to deploy react app: npm run build
        3. File & Folder structure of React app using vite
            - package.json file : npm configuaration file for the project
            - package-lock.json file : used to hold version of dependent package of the project
            - eslint.config.js file : js configuaration file
            - .gitignore file : used to hold file & folder to be ignored while adding to git
            - node_modules folder : used to locally store dependent packages of project, we can generate node_modules folder with help of command 'npm install'
            - public folder : used to hold data that can accessed by any part of the project. 
            - index.html file : entry point of react Application, react app will display in index.html file
            - src folder : logic of react app is defined here
                - main.jsx file : define the logic to render ( displaying in browser ) react app in html element with id as 'root'
                    - createRoot() : createRoot lets you create a root to display React components inside a browser DOM node.
                - css file : used to define style for all components in react app
                - App.jsx file : used to create react root component
                - assets folder : used to hold media files used in react project
        4. Components : are part of user interface.  used to display content in browser, to create component create a js/jsx file with filename start with capital letter
            - create react components in 2 types
                - Functional based / Stateless component : uses js pure function to build component, function name must similar to its filename. function must return jsx code 
                - Class based / state full component : uses class to create component. class inherit react component class. render method in class used to return jsx. 
                    - to create state. it has to call super method in its constructor to get its parent features. state is an object, where we can store value as key-value pairs, to update the state use a predefined method setState() pass its argument as updated value of state.
           
            - Life Cycle Methods of React component
                - Mounting Phase : Putting JSX into DOM
                    - constructor()
                    - getDerivedStateFromProps()
                    - render()
                    - componentDidMount()
                - Updating Phase : When component get updated
                    - getDerivedStateFromProps()
                    - shouldComponentUpdate()
                    - render()
                    - getSnapshotBeforeUpdate()
                    - componentDidUpdate()
                - Unmounting Phase : Removing component from DOM
                    - componentWillUnmount()
            - Difference class based vs functionnal based component
                Class Based Components                      Functional based component
            ---------------------------------------     ------------------------------------------
            1. using class to create , render           1. using js pure function and return jsx
            method must return jsx
            2. Statefull component                      2. Stateless component
            3. Hooks are not used                       3. Hooks are used
            4. Need constructor to Initialise           4. No need of constructor
            state
            5. Life cycle methods are available         5. Life cycle methods not are available

        5. Data shairing between React Components
            - Data can be shared from parent to child : use 'props' object
        6. Props : is a property of a component. it is an object used to transfer data from parent component to child component, parent data can be shared via child tag attribute.  to access parent data in child we have to props. props used in the child component function argument. props cannot be changed
        7. Conditional Rendering : used based on condition rendering jsx elements in browser, using if-else statements (ternary operator ?:) / if statements (&& operator)
        8. List in React : use map array method. set key attribute to duplicating JSX element in a list.  ()
        9. CSS Styling in React : Different ways to apply css to JSX elements
            - using Inline CSS : using style attribute to apply style to jsx element, style must be as js object
                - syntax : style={{cssProperty:value,...}}
            - using External CSS : Define css style in an external css file. Link css file to component file using import statements. We cannot import css file into a variable in component file
                - import 'css file path'
            - using CSS Module file : file with extension as .module.css is known as css 'module file', In this we have to define style in class. To use module css file we have to import it to component file.
                - import variableName from 'module css file path', to apply style in component, use variableName.className

            - Important CSS Styling Componenet Libraries 
               :- MUI
               :- React Bootstrap
               :- Bootswatch :- To provide themes for our application

        10. Events Handling in React : syntax - event={function call} onclick = 
                - Binding function without arguments : event={functionName}
                - Binding function with arguments : event={()=>functionName(argument)} 
                - Binding function with arguments as event : event={(event)=>functionName(event)}
                
        11. State in React : used to store data of a component. when state value changes component will re render
        13. Hooks in React : Predifned functions in react is known as hooks. Used to provide react component features to functionnal based component. All hooks name are starts with 'use' keyword. To use a hook in a functionnal component, it has to call the hook. 
            - Rules to use/call hooks in functionnal component
                - import hook in component file
                - to use hook in component call the hook in top level of component
                - Hooks cannot be Conditional
            - Based on react features there are different types hooks are available
                - Built in Hooks
                    - useState(initial-value) hook : used to create state in functionnal component, this hook will return an array with 2 arguments.  first argument will the state , second argument is a function name used to update state. state updating function name generally start with 'set'.
                    - useEffect(callbackFn,dependency) hook : used to apply side effcets to the functionnal component. we can pass side effect in its first aragument as  call back function, we can also pass an optional dependency argument to decide when to apply side effects in component
                        - dependency different values
                            - no value : side effcets will apply to the component all the the time, wihch leads to an infinite loop.
                            - empty array : side effcets will apply to the component only at the time of loading the component in DOM
                            - [state/props/variable_name] : side effcets will apply to the component not only at the time of loading of the component in DOM but also whenever the value of state/props/variable_name given in the dependency changes

                - Custom Hooks : create js file to define a specific function for a special task. export the function from that file. function name must start with 'use' keyword



        14. Form Handling in React : there are 2 ways to Manage data inside the form by a component
            - Controlled Components : are component which store form data inside its own state
            - Uncontrolled components : component who access form data using its DOM elements reference 
        
        15. React-Router-Dom : it is apackage that is used to set up path for component in react
       







//tcs
https://youtu.be/xFs6Fe92rqc?si=LUc-JGXHd20Flh-A
<iframe width="560" height="315" src="https://www.youtube.com/embed/xFs6Fe92rqc?si=LUc-JGXHd20Flh-A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>


//ibm
"https://youtu.be/pXhwviDpa1I?si=3sE36NowWdQWqvd6"



<iframe width="560" height="315" src="https://www.youtube.com/embed/pXhwviDpa1I?si=3sE36NowWdQWqvd6" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>





draggable:- it is an attribute on an html element to make it draggable (values:- true,false)

onDragStart :- Triggered when a user starts dragging an element

                commonly used to store data that will be transfered when the drag operation
                is completed


dataTransfer Object :- A property of drag event that holds data associated with the drag operation